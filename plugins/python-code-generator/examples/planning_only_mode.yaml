# Esempio Modalità Planning: Solo Pianificazione senza Generazione Codice
# Dimostra l'utilizzo del plugin per creare solo piani di sviluppo

variables:
  openai_api_key: ""  # Inserisci la tua API key OpenAI
  project_type: "sistema di cache distribuito"
  technology_stack: "Redis, Python, Docker"

start_state: "plan_cache_system"

states:
  plan_cache_system:
    state_type: "python_code_generator"
    prompt: |
      Pianifica lo sviluppo di un {project_type} con le seguenti specifiche:
      
      REQUISITI FUNZIONALI:
      - Cache distribuita multi-nodo con {technology_stack}
      - Supporto per TTL (Time To Live) configurabile
      - Strategie di eviction (LRU, LFU, FIFO)
      - Replicazione e failover automatico
      - Monitoring e metriche in tempo reale
      - API REST per gestione cache
      - Client Python con connection pooling
      - Serializzazione automatica oggetti Python
      
      REQUISITI NON FUNZIONALI:
      - Scalabilità orizzontale fino a 100 nodi
      - Latenza < 1ms per operazioni locali
      - Throughput > 100K ops/sec per nodo
      - Disponibilità 99.9%
      - Sicurezza con autenticazione e crittografia
      - Deployment con Docker e Kubernetes
      
      Crea un piano di sviluppo dettagliato con priorità, dipendenze e stime temporali.
    max_steps: 20
    provider: "openai"
    model: "gpt-4"
    api_key: "{openai_api_key}"
    temperature: 0.1
    complexity_level: "expert"
    execution_mode: "plan_only"  # Solo pianificazione
    include_tests: true
    plan_output: "cache_system_plan"
    output: "planning_result"
    success_transition: "analyze_plan"
    error_transition: "handle_error"

  analyze_plan:
    state_type: "command"
    action:
      eval: |
        print("📋 PIANO DI SVILUPPO SISTEMA CACHE DISTRIBUITO")
        print("="*70)
        print(f"🤖 Generato con: {planning_result.provider} ({planning_result.model})")
        print(f"⏱️ Tempo pianificazione: {planning_result.execution_time:.2f}s")
        print(f"📊 Step utilizzati: {planning_result.steps_executed}")
        print(f"🔄 Revisioni: {planning_result.plan_revisions}")
        
        print(f"\n📈 PIANO DETTAGLIATO ({len(cache_system_plan)} fasi):")
        print("-" * 70)
        
        total_estimated_days = 0
        for i, step in enumerate(cache_system_plan, 1):
            print(f"\n{i:2d}. 🎯 {step['title']}")
            print(f"     📝 {step['description']}")
            
            if step.get('components'):
                components = ", ".join(step['components'])
                print(f"     🔧 Componenti: {components}")
            
            if step.get('dependencies'):
                deps = ", ".join([f"Step {d}" for d in step['dependencies']])
                print(f"     🔗 Dipendenze: {deps}")
            
            # Stima giorni (simulata)
            estimated_days = len(step.get('components', [])) * 2 + 1
            total_estimated_days += estimated_days
            print(f"     ⏰ Stima: {estimated_days} giorni")
        
        print(f"\n📊 RIEPILOGO PROGETTO:")
        print("-" * 70)
        print(f"📅 Durata stimata totale: {total_estimated_days} giorni")
        print(f"👥 Team suggerito: 3-5 sviluppatori")
        print(f"🏗️ Fasi principali: {len(cache_system_plan)}")
        print(f"⚡ Complessità: Expert level")
    transition: "create_detailed_docs"

  create_detailed_docs:
    state_type: "python_code_generator"
    prompt: |
      Basandoti sul piano di sviluppo creato, genera la documentazione tecnica dettagliata per il sistema di cache distribuito.
      
      La documentazione deve includere:
      1. Architettura del sistema con diagrammi
      2. Specifiche tecniche dettagliate
      3. API documentation
      4. Database schema e strutture dati
      5. Deployment guide
      6. Monitoring e troubleshooting
      7. Security considerations
      8. Performance tuning guide
    max_steps: 15
    provider: "openai"
    model: "gpt-4"
    api_key: "{openai_api_key}"
    temperature: 0.2
    complexity_level: "expert"
    execution_mode: "plan_only"
    plan_output: "documentation_plan"
    success_transition: "save_all_plans"
    error_transition: "save_main_plan"

  save_all_plans:
    state_type: "file"
    action: "write"
    path: "cache_system_development_plan.json"
    content: |
      {
        "project_info": {
          "name": "Sistema Cache Distribuito",
          "technology_stack": "{technology_stack}",
          "generated_by": "IntellyHub Python Code Generator",
          "generation_date": "{planning_result.timestamp}",
          "provider": "{planning_result.provider}",
          "model": "{planning_result.model}",
          "planning_time": "{planning_result.execution_time:.2f}s",
          "steps_used": "{planning_result.steps_executed}"
        },
        "development_plan": {cache_system_plan},
        "documentation_plan": {documentation_plan}
      }
    transition: "create_project_structure"

  save_main_plan:
    state_type: "file"
    action: "write"
    path: "cache_system_development_plan.json"
    content: |
      {
        "project_info": {
          "name": "Sistema Cache Distribuito",
          "technology_stack": "{technology_stack}",
          "generated_by": "IntellyHub Python Code Generator",
          "generation_date": "{planning_result.timestamp}",
          "provider": "{planning_result.provider}",
          "model": "{planning_result.model}",
          "planning_time": "{planning_result.execution_time:.2f}s",
          "steps_used": "{planning_result.steps_executed}"
        },
        "development_plan": {cache_system_plan}
      }
    transition: "create_project_structure"

  create_project_structure:
    state_type: "file"
    action: "write"
    path: "PROJECT_STRUCTURE.md"
    content: |
      # 🏗️ Struttura Progetto Sistema Cache Distribuito
      
      Progetto pianificato con **IntellyHub Python Code Generator v1.0.0**
      
      ## 📊 Informazioni Progetto
      
      - **Nome**: Sistema Cache Distribuito
      - **Stack Tecnologico**: {technology_stack}
      - **Pianificato il**: {planning_result.timestamp}
      - **Provider LLM**: {planning_result.provider} ({planning_result.model})
      - **Tempo Pianificazione**: {planning_result.execution_time:.2f} secondi
      - **Step Utilizzati**: {planning_result.steps_executed}
      
      ## 📁 Struttura Directory Suggerita
      
      ```
      cache-system/
      ├── src/
      │   ├── core/                 # Core cache engine
      │   ├── api/                  # REST API
      │   ├── client/               # Python client
      │   ├── monitoring/           # Metrics & monitoring
      │   └── utils/                # Utilities
      ├── tests/
      │   ├── unit/                 # Unit tests
      │   ├── integration/          # Integration tests
      │   └── performance/          # Performance tests
      ├── docker/
      │   ├── Dockerfile
      │   └── docker-compose.yml
      ├── k8s/                      # Kubernetes manifests
      ├── docs/
      │   ├── api/                  # API documentation
      │   ├── architecture/         # Architecture docs
      │   └── deployment/           # Deployment guides
      ├── scripts/
      │   ├── setup.sh
      │   └── deploy.sh
      └── config/
          ├── development.yml
          ├── staging.yml
          └── production.yml
      ```
      
      ## 🎯 Fasi di Sviluppo
      
      {% for step in cache_system_plan %}
      ### Fase {{ loop.index }}: {{ step.title }}
      
      **Descrizione**: {{ step.description }}
      
      {% if step.components %}
      **Componenti da sviluppare**:
      {% for component in step.components %}
      - {{ component }}
      {% endfor %}
      {% endif %}
      
      {% if step.dependencies %}
      **Dipendenze**: {{ step.dependencies | join(', ') }}
      {% endif %}
      
      ---
      {% endfor %}
      
      ## 🚀 Prossimi Passi
      
      1. **Setup Ambiente**: Configura ambiente di sviluppo
      2. **Prototipo**: Implementa MVP delle funzionalità core
      3. **Iterazione**: Sviluppa seguendo il piano fase per fase
      4. **Testing**: Implementa test per ogni componente
      5. **Deployment**: Setup pipeline CI/CD
      6. **Monitoring**: Implementa metriche e alerting
      
      ## 📋 Checklist Pre-Sviluppo
      
      - [ ] Team assembly (3-5 sviluppatori)
      - [ ] Setup repository Git
      - [ ] Configurazione ambiente sviluppo
      - [ ] Setup Redis cluster di test
      - [ ] Definizione coding standards
      - [ ] Setup CI/CD pipeline
      - [ ] Configurazione monitoring tools
      
      ---
      
      *Piano generato automaticamente da IntellyHub Python Code Generator*
    transition: "create_readme"

  create_readme:
    state_type: "file"
    action: "write"
    path: "README.md"
    content: |
      # 🚀 Sistema Cache Distribuito - Piano di Sviluppo
      
      Piano di sviluppo completo generato automaticamente da **IntellyHub Python Code Generator**.
      
      ## 🎯 Obiettivo
      
      Sviluppare un sistema di cache distribuito enterprise-grade con {technology_stack}.
      
      ## 📊 Statistiche Pianificazione
      
      - **Generato il**: {planning_result.timestamp}
      - **Provider**: {planning_result.provider} ({planning_result.model})
      - **Tempo pianificazione**: {planning_result.execution_time:.2f}s
      - **Step utilizzati**: {planning_result.steps_executed}
      - **Fasi pianificate**: {len(cache_system_plan)}
      
      ## 📁 File Generati
      
      - `cache_system_development_plan.json` - Piano dettagliato in formato JSON
      - `PROJECT_STRUCTURE.md` - Struttura progetto e directory
      - `README.md` - Questo file
      
      ## 🏗️ Architettura Prevista
      
      ```
      ┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
      │   Client App    │    │   Client App    │    │   Client App    │
      └─────────┬───────┘    └─────────┬───────┘    └─────────┬───────┘
                │                      │                      │
                └──────────────────────┼──────────────────────┘
                                       │
                              ┌─────────┴───────┐
                              │   Load Balancer │
                              └─────────┬───────┘
                                        │
                    ┌───────────────────┼───────────────────┐
                    │                   │                   │
              ┌─────┴─────┐       ┌─────┴─────┐       ┌─────┴─────┐
              │Cache Node1│       │Cache Node2│       │Cache Node3│
              └─────┬─────┘       └─────┬─────┘       └─────┬─────┘
                    │                   │                   │
                    └───────────────────┼───────────────────┘
                                        │
                                ┌─────────┴───────┐
                                │  Redis Cluster  │
                                └─────────────────┘
      ```
      
      ## 🚀 Quick Start
      
      1. **Rivedi il piano**: Apri `cache_system_development_plan.json`
      2. **Studia l'architettura**: Leggi `PROJECT_STRUCTURE.md`
      3. **Setup team**: Assembla il team di sviluppo
      4. **Inizia sviluppo**: Segui le fasi del piano
      
      ## 📈 Roadmap
      
      | Fase | Descrizione | Durata Stimata |
      |------|-------------|----------------|
      {% for step in cache_system_plan %}
      | {{ loop.index }} | {{ step.title }} | {{ (step.components|length * 2 + 1) }} giorni |
      {% endfor %}
      
      **Durata totale stimata**: ~{{ (cache_system_plan|map(attribute='components')|map('length')|sum * 2 + cache_system_plan|length) }} giorni
      
      ## 🛠️ Tecnologie
      
      - **Backend**: Python 3.9+
      - **Cache**: Redis Cluster
      - **API**: FastAPI / Flask
      - **Containerization**: Docker
      - **Orchestration**: Kubernetes
      - **Monitoring**: Prometheus + Grafana
      - **Testing**: pytest, locust
      
      ## 📞 Supporto
      
      Per domande sul piano di sviluppo o sull'utilizzo di IntellyHub Python Code Generator:
      
      - 📧 Email: support@intellyhub.com
      - 🐛 Issues: [GitHub Issues](https://github.com/kuduk/intellyhub-plugins/issues)
      - 💬 Discussioni: [GitHub Discussions](https://github.com/kuduk/intellyhub-plugins/discussions)
      
      ---
      
      **Pianificato con ❤️ da IntellyHub Python Code Generator v1.0.0**
    transition: "finalize"

  finalize:
    state_type: "command"
    action:
      eval: |
        print("\n🎉 PIANIFICAZIONE COMPLETATA!")
        print("="*50)
        print("📁 File di pianificazione creati:")
        print("   • cache_system_development_plan.json")
        print("   • PROJECT_STRUCTURE.md")
        print("   • README.md")
        
        print(f"\n📊 Statistiche:")
        print(f"   • Fasi pianificate: {len(cache_system_plan)}")
        print(f"   • Step utilizzati: {planning_result.steps_executed}")
        print(f"   • Tempo pianificazione: {planning_result.execution_time:.2f}s")
        print(f"   • Provider: {planning_result.provider}")
        
        print("\n🚀 Prossimi passi:")
        print("   1. Rivedi il piano dettagliato")
        print("   2. Assembla il team di sviluppo")
        print("   3. Setup ambiente e repository")
        print("   4. Inizia lo sviluppo seguendo le fasi")
        
        print("\n💡 Suggerimento:")
        print("   Usa il plugin in modalità 'full' per generare")
        print("   automaticamente il codice di ogni fase!")
    transition: "end"

  handle_error:
    state_type: "command"
    action:
      eval: |
        print("❌ ERRORE NELLA PIANIFICAZIONE")
        print("="*40)
        if 'planning_result' in locals():
            print(f"Errore: {planning_result.get('error', 'Errore sconosciuto')}")
            print(f"Step completati: {planning_result.get('steps_executed', 0)}")
        else:
            print("Errore durante l'inizializzazione")
        
        print("\n💡 Suggerimenti:")
        print("   • Verifica la configurazione API key")
        print("   • Semplifica il prompt se troppo complesso")
        print("   • Aumenta max_steps se necessario")
    transition: "end"

  end:
    state_type: "end"
