# Esempio Workspace: Dimostra la gestione del workspace per organizzare i file generati
# Mostra come il plugin crea automaticamente una struttura di progetto organizzata

variables:
  openai_api_key: ""  # Inserisci la tua API key OpenAI
  project_name: "calculator_app"
  workspace_root: "my_projects"

start_state: "generate_calculator"

states:
  generate_calculator:
    state_type: "python_code_generator"
    prompt: "Crea una calcolatrice scientifica con interfaccia a riga di comando che supporta operazioni base, funzioni trigonometriche, logaritmi e gestione della cronologia"
    max_steps: 18
    provider: "openai"
    model: "gpt-3.5-turbo"
    api_key: "{openai_api_key}"
    temperature: 0.3
    complexity_level: "medium"
    code_style: "pep8"
    include_tests: true
    include_documentation: true
    validate_syntax: true
    execution_mode: "full"
    
    # Configurazione Workspace
    workspace_enabled: true
    workspace_root: "{workspace_root}"
    project_name: "{project_name}"
    timestamp_folders: true
    project_subfolder: true
    cleanup_on_error: false
    
    # Output
    output: "calculator_result"
    code_output: "calculator_code"
    tests_output: "calculator_tests"
    plan_output: "calculator_plan"
    
    success_transition: "show_workspace_info"
    error_transition: "handle_error"

  show_workspace_info:
    state_type: "command"
    action:
      eval: |
        print("üéâ CALCOLATRICE SCIENTIFICA GENERATA CON WORKSPACE!")
        print("="*60)
        print(f"üìÅ Workspace Path: {calculator_result.workspace_path}")
        print(f"ü§ñ Provider: {calculator_result.provider} ({calculator_result.model})")
        print(f"üìä Step eseguiti: {calculator_result.steps_executed}")
        print(f"‚è±Ô∏è Tempo totale: {calculator_result.execution_time:.2f}s")
        print(f"üîÑ Revisioni piano: {calculator_result.plan_revisions}")
        
        print("\nüìã PIANO DI SVILUPPO ESEGUITO:")
        print("-" * 60)
        for i, step in enumerate(calculator_result.execution_plan, 1):
            print(f"{i:2d}. {step['title']}")
            print(f"     üìù {step['description']}")
        
        print(f"\nüìÅ STRUTTURA WORKSPACE CREATA:")
        print("-" * 60)
        print(f"{calculator_result.workspace_path}/")
        print("‚îú‚îÄ‚îÄ src/")
        print(f"‚îÇ   ‚îî‚îÄ‚îÄ {project_name}.py          # Codice principale")
        print("‚îú‚îÄ‚îÄ tests/")
        print(f"‚îÇ   ‚îî‚îÄ‚îÄ test_{project_name}.py     # Test unitari")
        print("‚îú‚îÄ‚îÄ docs/")
        print("‚îÇ   ‚îî‚îÄ‚îÄ execution_plan.json        # Piano di sviluppo")
        print("‚îú‚îÄ‚îÄ config/")
        print("‚îÇ   ‚îî‚îÄ‚îÄ project_metadata.json      # Metadati progetto")
        print("‚îî‚îÄ‚îÄ README.md                       # Documentazione")
        
        print(f"\nüöÄ PROSSIMI PASSI:")
        print(f"   1. cd {calculator_result.workspace_path}")
        print(f"   2. python src/{project_name}.py")
        print(f"   3. python -m pytest tests/ -v")
        
        print(f"\nüìä STATISTICHE CODICE:")
        code_lines = len(calculator_code.split('\n'))
        test_lines = len(calculator_tests.split('\n'))
        print(f"   üìù Linee di codice: {code_lines}")
        print(f"   üß™ Linee di test: {test_lines}")
        print(f"   üìã Fasi pianificate: {len(calculator_result.execution_plan)}")
    transition: "create_requirements"

  create_requirements:
    state_type: "file"
    action: "write"
    path: "{calculator_result.workspace_path}/requirements.txt"
    content: |
      # Dipendenze per Calculator App
      # Generato automaticamente da IntellyHub Python Code Generator
      
      # Core dependencies (se necessarie)
      # numpy>=1.21.0
      # scipy>=1.7.0
      
      # Development dependencies
      pytest>=7.0.0
      pytest-cov>=4.0.0
      black>=23.0.0
      flake8>=6.0.0
      
      # Documentation
      # sphinx>=4.0.0
    transition: "create_gitignore"

  create_gitignore:
    state_type: "file"
    action: "write"
    path: "{calculator_result.workspace_path}/.gitignore"
    content: |
      # Python
      __pycache__/
      *.py[cod]
      *$py.class
      *.so
      .Python
      build/
      develop-eggs/
      dist/
      downloads/
      eggs/
      .eggs/
      lib/
      lib64/
      parts/
      sdist/
      var/
      wheels/
      *.egg-info/
      .installed.cfg
      *.egg
      
      # Testing
      .pytest_cache/
      .coverage
      htmlcov/
      .tox/
      
      # IDEs
      .vscode/
      .idea/
      *.swp
      *.swo
      *~
      
      # OS
      .DS_Store
      Thumbs.db
    transition: "create_makefile"

  create_makefile:
    state_type: "file"
    action: "write"
    path: "{calculator_result.workspace_path}/Makefile"
    content: |
      # Makefile per Calculator App
      # Generato automaticamente da IntellyHub Python Code Generator
      
      .PHONY: help install test lint format clean run
      
      help:
      	@echo "Comandi disponibili:"
      	@echo "  install    - Installa dipendenze"
      	@echo "  test       - Esegui test"
      	@echo "  lint       - Controlla qualit√† codice"
      	@echo "  format     - Formatta codice"
      	@echo "  clean      - Pulisci file temporanei"
      	@echo "  run        - Esegui applicazione"
      
      install:
      	pip install -r requirements.txt
      
      test:
      	python -m pytest tests/ -v --cov=src --cov-report=html
      
      lint:
      	flake8 src/ tests/
      
      format:
      	black src/ tests/
      
      clean:
      	find . -type f -name "*.pyc" -delete
      	find . -type d -name "__pycache__" -delete
      	rm -rf htmlcov/
      	rm -rf .pytest_cache/
      	rm -rf .coverage
      
      run:
      	python src/{project_name}.py
    transition: "finalize_workspace"

  finalize_workspace:
    state_type: "command"
    action:
      eval: |
        print("\nüéâ WORKSPACE COMPLETO CREATO!")
        print("="*50)
        print("üìÅ File aggiuntivi creati:")
        print("   ‚úÖ requirements.txt")
        print("   ‚úÖ .gitignore")
        print("   ‚úÖ Makefile")
        
        print(f"\nüìä Riepilogo finale:")
        print(f"   üìÅ Workspace: {calculator_result.workspace_path}")
        print(f"   üêç Progetto: {project_name}")
        print(f"   ‚è±Ô∏è Tempo totale: {calculator_result.execution_time:.2f}s")
        print(f"   üìä Step utilizzati: {calculator_result.steps_executed}/{calculator_result.steps_executed + calculator_result.steps_remaining}")
        
        print(f"\nüöÄ Il progetto √® pronto!")
        print(f"   cd {calculator_result.workspace_path}")
        print("   make install")
        print("   make test")
        print("   make run")
        
        print("\n‚ú® Buon coding!")
    transition: "end"

  handle_error:
    state_type: "command"
    action:
      eval: |
        print("‚ùå ERRORE NELLA GENERAZIONE")
        print("="*40)
        
        if 'calculator_result' in locals():
            print(f"Errore: {calculator_result.get('error', 'Errore sconosciuto')}")
            print(f"Step completati: {calculator_result.get('steps_executed', 0)}")
            
            if calculator_result.get('workspace_path'):
                print(f"\nüìÅ Workspace parziale: {calculator_result.workspace_path}")
                print("üí° Controlla i file parziali generati")
            
            if calculator_result.get('partial_code'):
                print("\nüîß Codice parziale disponibile")
        else:
            print("Errore durante l'inizializzazione")
        
        print("\nüí° Suggerimenti:")
        print("   ‚Ä¢ Verifica la configurazione API key")
        print("   ‚Ä¢ Controlla i permessi di scrittura")
        print("   ‚Ä¢ Riduci max_steps se necessario")
        print("   ‚Ä¢ Verifica spazio disco disponibile")
    transition: "end"

  end:
    state_type: "end"
