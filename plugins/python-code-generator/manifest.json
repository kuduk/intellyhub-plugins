{
  "name": "python-code-generator",
  "version": "1.0.0",
  "description": "Plugin avanzato per la generazione di codice Python tramite LLM con pianificazione step-by-step, controllo limiti e generazione test automatica",
  "author": "IntellyHub Team",
  "license": "MIT",
  "entry_file": "python_code_generator_state.py",
  "state_type": "python_code_generator",
  "dependencies": {},
  "requirements": [
    "langchain>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "ast>=3.8.0"
  ],
  "optional_requirements": [
    "black>=23.0.0",
    "pylint>=2.15.0",
    "pytest>=7.0.0"
  ],
  "api_version": "1.0",
  "tags": ["ai", "code-generation", "python", "llm", "langchain", "planning", "testing", "automation"],
  "documentation": {
    "parameters": {
      "prompt": {
        "type": "string",
        "required": true,
        "description": "Prompt di input che descrive il codice Python da generare"
      },
      "max_steps": {
        "type": "integer",
        "required": false,
        "default": 20,
        "description": "Numero massimo di step consentiti per l'esecuzione completa"
      },
      "provider": {
        "type": "string",
        "required": false,
        "default": "openai",
        "options": ["openai", "anthropic", "ollama"],
        "description": "Provider LLM da utilizzare per la generazione"
      },
      "model": {
        "type": "string",
        "required": false,
        "default": "gpt-3.5-turbo",
        "description": "Modello specifico del provider da utilizzare"
      },
      "api_key": {
        "type": "string",
        "required": false,
        "description": "Chiave API per provider cloud (OpenAI, Anthropic)"
      },
      "base_url": {
        "type": "string",
        "required": false,
        "description": "URL base per provider locali (Ollama) o endpoint personalizzati"
      },
      "temperature": {
        "type": "float",
        "required": false,
        "default": 0.3,
        "description": "Temperatura per la generazione del codice (0.0-1.0, valori bassi per codice più deterministico)"
      },
      "include_tests": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Se generare automaticamente test unitari per il codice"
      },
      "execution_mode": {
        "type": "string",
        "required": false,
        "default": "full",
        "options": ["plan_only", "generate_only", "full"],
        "description": "Modalità di esecuzione: solo piano, solo generazione, o completa"
      },
      "code_style": {
        "type": "string",
        "required": false,
        "default": "pep8",
        "options": ["pep8", "google", "numpy", "custom"],
        "description": "Stile di codice da seguire nella generazione"
      },
      "complexity_level": {
        "type": "string",
        "required": false,
        "default": "medium",
        "options": ["simple", "medium", "complex", "expert"],
        "description": "Livello di complessità del codice da generare"
      },
      "include_documentation": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Se includere docstring e commenti nel codice generato"
      },
      "validate_syntax": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Se validare la sintassi del codice generato"
      },
      "output": {
        "type": "string",
        "required": false,
        "description": "Nome della variabile dove salvare l'output completo del plugin"
      },
      "code_output": {
        "type": "string",
        "required": false,
        "default": "generated_code",
        "description": "Nome della variabile dove salvare solo il codice generato"
      },
      "plan_output": {
        "type": "string",
        "required": false,
        "default": "execution_plan",
        "description": "Nome della variabile dove salvare il piano di esecuzione"
      },
      "tests_output": {
        "type": "string",
        "required": false,
        "default": "generated_tests",
        "description": "Nome della variabile dove salvare i test generati"
      },
      "success_transition": {
        "type": "string",
        "required": false,
        "description": "Stato successivo in caso di successo"
      },
      "error_transition": {
        "type": "string",
        "required": false,
        "description": "Stato successivo in caso di errore o superamento limiti"
      },
      "warning_transition": {
        "type": "string",
        "required": false,
        "description": "Stato successivo in caso di warning (es. limite step vicino)"
      },
      "workspace_enabled": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Se abilitare la gestione workspace per organizzare i file generati"
      },
      "workspace_root": {
        "type": "string",
        "required": false,
        "default": "workspace",
        "description": "Directory radice del workspace"
      },
      "project_name": {
        "type": "string",
        "required": false,
        "description": "Nome del progetto per organizzare i file (auto-generato se non specificato)"
      },
      "timestamp_folders": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Se aggiungere timestamp ai nomi delle cartelle progetto"
      },
      "project_subfolder": {
        "type": "boolean",
        "required": false,
        "default": true,
        "description": "Se creare sottocartelle strutturate per il progetto"
      },
      "cleanup_on_error": {
        "type": "boolean",
        "required": false,
        "default": false,
        "description": "Se eliminare file parziali in caso di errore"
      }
    },
    "examples": [
      {
        "name": "Generazione Fibonacci semplice",
        "description": "Genera una funzione per calcolare la sequenza di Fibonacci",
        "config": {
          "state_type": "python_code_generator",
          "prompt": "Crea una funzione per calcolare la sequenza di Fibonacci fino a n termini",
          "max_steps": 10,
          "provider": "openai",
          "model": "gpt-3.5-turbo",
          "complexity_level": "simple",
          "include_tests": true,
          "output": "fibonacci_result",
          "success_transition": "review_code",
          "error_transition": "handle_error"
        }
      },
      {
        "name": "Algoritmo di sorting avanzato",
        "description": "Implementa un algoritmo di sorting personalizzato con ottimizzazioni",
        "config": {
          "state_type": "python_code_generator",
          "prompt": "Implementa un algoritmo di merge sort ottimizzato per grandi dataset con analisi di complessità",
          "max_steps": 25,
          "provider": "anthropic",
          "model": "claude-3-sonnet-20240229",
          "complexity_level": "expert",
          "code_style": "google",
          "include_documentation": true,
          "execution_mode": "full",
          "output": "sorting_algorithm",
          "success_transition": "benchmark_algorithm"
        }
      },
      {
        "name": "API client con gestione errori",
        "description": "Crea un client API REST con retry logic e gestione errori",
        "config": {
          "state_type": "python_code_generator",
          "prompt": "Crea una classe APIClient per interagire con REST API, includi retry logic, timeout, gestione errori HTTP e logging",
          "max_steps": 20,
          "provider": "openai",
          "model": "gpt-4",
          "complexity_level": "complex",
          "include_tests": true,
          "validate_syntax": true,
          "code_output": "api_client_code",
          "tests_output": "api_client_tests",
          "success_transition": "test_api_client"
        }
      },
      {
        "name": "Data processing pipeline",
        "description": "Implementa una pipeline per il processing di dati CSV",
        "config": {
          "state_type": "python_code_generator",
          "prompt": "Crea una pipeline per processare file CSV: lettura, pulizia dati, trasformazioni, validazione e export",
          "max_steps": 30,
          "provider": "ollama",
          "model": "codellama",
          "base_url": "http://localhost:11434",
          "complexity_level": "medium",
          "execution_mode": "full",
          "include_documentation": true,
          "output": "data_pipeline",
          "success_transition": "test_pipeline"
        }
      },
      {
        "name": "Solo pianificazione",
        "description": "Genera solo il piano di sviluppo senza implementazione",
        "config": {
          "state_type": "python_code_generator",
          "prompt": "Pianifica lo sviluppo di un sistema di cache distribuito con Redis",
          "max_steps": 15,
          "execution_mode": "plan_only",
          "complexity_level": "expert",
          "plan_output": "cache_system_plan",
          "success_transition": "review_plan"
        }
      }
    ],
    "internal_states": {
      "PLAN_CREATION": "Creazione del piano di sviluppo iniziale",
      "STEP_EXECUTION": "Esecuzione di uno step specifico del piano",
      "PLAN_REVIEW": "Revisione e aggiornamento del piano",
      "TEST_GENERATION": "Generazione dei test unitari",
      "CODE_VALIDATION": "Validazione sintassi e qualità del codice",
      "EXECUTION": "Esecuzione del codice in ambiente sicuro",
      "COMPLETION": "Finalizzazione e preparazione output",
      "ERROR": "Gestione errori e superamento limiti"
    },
    "step_types": {
      "plan_creation": "Creazione piano iniziale (1 step)",
      "code_generation": "Generazione codice per uno step del piano",
      "plan_revision": "Revisione e modifica del piano esistente",
      "test_generation": "Generazione test unitari (1 step per gruppo di test)",
      "code_validation": "Validazione sintassi e stile del codice",
      "code_execution": "Esecuzione del codice generato",
      "documentation": "Generazione documentazione aggiuntiva"
    }
  },
  "installation": {
    "instructions": [
      "1. Il plugin verrà installato automaticamente in flow/states/",
      "2. Le dipendenze LangChain verranno installate automaticamente",
      "3. Installa provider LLM specifici se necessario:",
      "   - OpenAI: pip install openai",
      "   - Anthropic: pip install anthropic",
      "4. Per funzionalità avanzate installa dipendenze opzionali:",
      "   - Formattazione codice: pip install black",
      "   - Analisi qualità: pip install pylint",
      "   - Testing: pip install pytest",
      "5. Configura le API keys nelle variabili d'ambiente o nel workflow",
      "6. Riavviare l'applicazione per caricare il plugin"
    ],
    "post_install": [
      "Verificare che il plugin sia caricato nei log di avvio:",
      "✅ Stato 'python_code_generator' registrato dalla classe PythonCodeGeneratorState"
    ],
    "environment_variables": [
      "OPENAI_API_KEY - per provider OpenAI",
      "ANTHROPIC_API_KEY - per provider Anthropic"
    ]
  },
  "compatibility": {
    "langchain_version": ">=0.1.0",
    "python_version": ">=3.8",
    "platforms": ["linux", "macos", "windows"]
  },
  "performance": {
    "typical_execution_time": "30-120 secondi",
    "memory_usage": "50-200 MB",
    "token_usage": "1000-5000 token per esecuzione",
    "concurrent_executions": "Supportate con limitazioni provider"
  },
  "security": {
    "code_execution": "Ambiente sandbox isolato",
    "input_validation": "Sanitizzazione prompt e parametri",
    "output_filtering": "Rimozione contenuti potenzialmente dannosi"
  }
}
